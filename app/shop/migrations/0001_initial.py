# Generated by Django 4.2.16 on 2024-11-26 01:54

from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import salesman.orders.models
import secrets
import shop.models
import taggit.managers
import wagtail.models
import wagtail.search.index


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailimages', '0025_alter_image_file_alter_rendition_file'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='BalanceProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_text', models.CharField(blank=True, max_length=255, verbose_name='Main text')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='Help text')),
                ('badge_text', models.CharField(blank=True, max_length=255, verbose_name='Badge text')),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=18, unique=True, verbose_name='Price')),
                ('replenishment', models.DecimalField(decimal_places=2, default=0, max_digits=18, verbose_name='Replenishment')),
                ('available', models.BooleanField(default=True, verbose_name='Available for viewing')),
            ],
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='Basket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra', models.JSONField(blank=True, default=dict, verbose_name='Extra')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'Basket',
                'verbose_name_plural': 'Baskets',
                'ordering': ['-date_created'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ImageCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Category')),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True, verbose_name='Slug')),
                ('available', models.BooleanField(default=True, verbose_name='Available for viewing')),
                ('display_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Display image')),
                ('parent_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop.imagecategory', verbose_name='Parent category')),
                ('preview_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Preview image')),
                ('small_preview_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Small preview image')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='ImageOrientation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='Image orientation')),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True, verbose_name='Slug')),
                ('available', models.BooleanField(default=True, verbose_name='Available for viewing')),
            ],
            options={
                'verbose_name': 'Image orientation',
                'verbose_name_plural': 'Image orientations',
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='ImageThumbnailSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('thumbnail_options', models.CharField(default='1, 2, 3', help_text='Integers separated by commas indicating how much to reduce the image size', verbose_name='Image thumbnail options')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OpenAISettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('openai_api_key', models.CharField(max_length=255, verbose_name='OpenAI API key')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref', models.CharField(help_text='A unique order reference.', max_length=128, unique=True, verbose_name='Reference')),
                ('status', models.CharField(default='NEW', help_text='Changing order status might trigger a notification to customer.', max_length=128, verbose_name='Status')),
                ('token', models.CharField(default=secrets.token_urlsafe, help_text="Allow non-authenticated customer to access the order with token. To access order suply a '?token={token}' in url querystring.", max_length=128, unique=True, verbose_name='Token')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('shipping_address', models.TextField(blank=True, verbose_name='Shipping address')),
                ('billing_address', models.TextField(blank=True, verbose_name='Billing address')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=18, verbose_name='Subtotal')),
                ('total', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=18, verbose_name='Total')),
                ('_extra', models.JSONField(blank=True, default=dict, verbose_name='Extra')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['-date_created'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PaginatorSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('products_per_page', models.PositiveIntegerField(default=40, verbose_name='Products per page')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_text', models.CharField(blank=True, max_length=255, verbose_name='Main text')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='Help text')),
                ('badge_text', models.CharField(blank=True, max_length=255, verbose_name='Badge text')),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=18, unique=True, verbose_name='Price')),
                ('download_limit', models.PositiveIntegerField(default=0, verbose_name='Download limit')),
                ('unlimited', models.BooleanField(default=False, verbose_name='Unlimited downloads')),
                ('duration_days', models.PositiveIntegerField(default=30, verbose_name='Duration')),
                ('available', models.BooleanField(default=True, verbose_name='Available for viewing')),
            ],
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='ZCreditSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=255, verbose_name='Z-Credit key')),
                ('additional_text', models.CharField(blank=True, help_text='Text to be logged with the transaction data. You can view it in your backoffice account online.', max_length=255, verbose_name='Additional text')),
                ('show_cart', models.BooleanField(default=True, help_text='Allows to hide the cart list of items, to get a minimal UI for credit card data only.', verbose_name='Show Cart')),
                ('force_captcha', models.BooleanField(default=False, help_text='When set to true, the payment page will show a "RecaptchaV2" inside the payment page.', verbose_name='Force Captcha')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='Start date')),
                ('end_date', models.DateField(verbose_name='End date')),
                ('downloads_remaining', models.IntegerField(verbose_name='Downloads remaining')),
                ('renew', models.BooleanField(default=True, verbose_name='Refresh when finished')),
                ('plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop.subscriptionplan', verbose_name='Subscription plan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='OrderNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(verbose_name='Message')),
                ('public', models.BooleanField(default=False, help_text='Is accessible to the customer?', verbose_name='Public')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('order', salesman.orders.models.ParentalForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to=settings.SALESMAN_ORDER_MODEL, verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Note',
                'verbose_name_plural': 'Notes',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_type', models.CharField(max_length=128, verbose_name='Product type')),
                ('product_id', models.PositiveIntegerField(null=True, verbose_name='Product id')),
                ('product_data', models.JSONField(blank=True, default=dict, verbose_name='Product data')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=18, verbose_name='Unit price')),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=18, verbose_name='Subtotal')),
                ('total', models.DecimalField(decimal_places=2, max_digits=18, verbose_name='Total')),
                ('quantity', models.PositiveIntegerField(verbose_name='Quantity')),
                ('_extra', models.JSONField(blank=True, default=dict, verbose_name='Extra')),
                ('order', salesman.orders.models.ParentalForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to=settings.SALESMAN_ORDER_MODEL, verbose_name='Order')),
                ('product_content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Item',
                'verbose_name_plural': 'Items',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ImageProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Product name')),
                ('description', models.TextField(blank=True, verbose_name='Product description')),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=18, verbose_name='Price')),
                ('image', models.ImageField(upload_to=shop.models.ImageProduct.save_image_to, verbose_name='Product image')),
                ('premium', models.BooleanField(default=False, verbose_name='Premium')),
                ('downloads', models.PositiveBigIntegerField(default=0)),
                ('publish_date', models.DateField(auto_now_add=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop.imagecategory', verbose_name='Category')),
                ('orientation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop.imageorientation', verbose_name='Orientation')),
                ('subscription_plans', models.ManyToManyField(blank=True, to='shop.subscriptionplan', verbose_name='Available on subscription plans')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.models.PreviewableMixin, wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='OrderPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=18, verbose_name='Amount')),
                ('transaction_id', models.CharField(max_length=128, verbose_name='Transaction ID')),
                ('payment_method', models.CharField(blank=True, max_length=128, verbose_name='Payment method')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('order', salesman.orders.models.ParentalForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.SALESMAN_ORDER_MODEL, verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'abstract': False,
                'unique_together': {('order', 'transaction_id')},
            },
        ),
        migrations.CreateModel(
            name='BasketItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref', models.SlugField(max_length=128, verbose_name='Reference')),
                ('product_id', models.PositiveIntegerField(verbose_name='Product id')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='Quantity')),
                ('extra', models.JSONField(blank=True, default=dict, verbose_name='Extra')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('basket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to=settings.SALESMAN_BASKET_MODEL, verbose_name='Basket')),
                ('product_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Item',
                'verbose_name_plural': 'Items',
                'ordering': ['date_created'],
                'abstract': False,
                'unique_together': {('basket', 'ref')},
            },
        ),
    ]
